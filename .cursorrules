
# Babywise Assistant Project Guidelines

## Project Overview
- Name: Babywise Assistant
- Description: A domain-specific assistant providing personalized baby care guidance and routine tracking for new and future parents
- Version: 1.0.0

## Project Purpose
- Provide personalized advice on baby care topics (sleep, feeding, baby gear, development, health/safety)
- Support multilingual interactions with full Hebrew language support including RTL formatting
- Enable comprehensive routine tracking for monitoring baby's schedule (daily, weekly, monthly)
- Present information in a user-friendly, WhatsApp-like chat interface

## Project Structure
```
Baby_wise/
├── backend/
│   ├── api/
│   │   ├── __init__.py
│   │   ├── index.py              # Main FastAPI application
│   │   ├── chat.py              # Chat endpoint handlers
│   │   ├── aioredis_patch.py    # Redis compatibility patches
│   │   ├── compatibility.py      # General compatibility patches
│   │   └── debug_openai.py      # OpenAI debugging endpoints
│   ├── db/
│   │   ├── __init__.py
│   │   ├── routine_db.py        # Routine tracking database
│   │   └── routine_tracker.py    # Routine tracking logic
│   ├── models/
│   │   ├── __init__.py
│   │   └── message_types.py     # Message type definitions
│   ├── services/
│   │   ├── __init__.py
│   │   ├── redis_service.py     # Redis operations
│   │   └── redis_compat.py      # Redis compatibility layer
│   ├── workflow/
│   │   ├── __init__.py
│   │   ├── workflow.py          # Main workflow definition
│   │   ├── extract_context.py   # Context extraction node
│   │   ├── select_domain.py     # Domain selection node
│   │   ├── generate_response.py # Response generation node
│   │   ├── post_process.py      # Post-processing node
│   │   └── command_processor.py # Command processing logic
│   └── data/
│       ├── prompts/             # LLM prompt templates
│       └── config/              # Configuration files
├── frontend/
│   ├── index.html              # Main application page
│   ├── css/
│   │   ├── style.css          # Main styles
│   │   └── rtl.css           # RTL support styles
│   └── js/
│       ├── app.js            # Main application logic
│       ├── chat.js           # Chat interface logic
│       └── routines.js       # Routine tracking UI logic
├── static/
│   ├── images/
│   ├── fonts/
│   └── icons/
├── tests/
│   ├── unit/
│   │   ├── test_workflow.py
│   │   └── test_routines.py
│   └── integration/
│       └── test_api.py
├── docs/
│   ├── API.md
│   ├── DEPLOYMENT.md
│   └── DEVELOPMENT.md
├── requirements.txt           # Project dependencies
├── .env.example              # Environment variables template
└── README.md                # Project documentation
```

## Critical Requirement: 
The only priority is to maintain full project functionality as designed.
❌ No simplified versions
❌ No hotfixes or quick patches that compromise intended functionality
Please ensure the solution preserves the app's original behavior while resolving the deployment problem. Let me know if you need any clarification!

## Technology Stack Updates
### Backend
- Python 3.9+ (updated from 3.12+ for better compatibility)
- LangChain 0.3.0 (exact version)
- LangGraph 0.2.20 (exact version)
- FastAPI 0.109.2
- Redis 4.2.0+
- aioredis 2.0.0
- SQLite with aiosqlite 0.19.0
- Uvicorn 0.27.1

### Package Management
- Single consolidated requirements.txt at project root
- Strict version pinning for core dependencies
- Flexible version ranges for development tools
- Clear dependency categorization:
  - Core dependencies
  - LangChain and related packages
  - Database and storage
  - Web and API related
  - Utilities
  - Development dependencies

## Development Standards
### Version Control
- Descriptive commit messages
- Feature branches for new development
- Pull request reviews required
- No direct commits to main branch

### Code Quality
- Black formatting for Python (max line length: 100)
- ESLint for JavaScript
- Type hints required for Python functions
- JSDoc documentation for JavaScript functions
- Unit tests required for new features
- Integration tests for API endpoints

### Error Handling
- Comprehensive error logging
- Graceful fallbacks for all operations
- User-friendly error messages
- Proper async/await error handling
- Redis operation retries
- Memory cache fallback when Redis unavailable

### State Management
- Thread-based conversation state
- Redis persistence with local fallback
- Proper serialization of all state objects
- Context preservation across workflow steps
- Automatic state cleanup for old threads

### Security
- Environment-based configuration
- API key rotation support
- Input sanitization
- Rate limiting
- CORS configuration
- Secure headers

### Performance
- Async operations throughout
- Connection pooling for Redis
- Caching for routine summaries
- Efficient state serialization
- Request timeout handling
- Memory usage optimization

## Critical Requirements
1. Maintain full functionality as designed
2. No simplified versions allowed
3. No compromising patches
4. Proper error handling required
5. Full test coverage maintained
6. Documentation kept up to date

## Deployment Requirements
1. Environment variable configuration
2. Redis connection management
3. Database migration support
4. Logging configuration
5. Error tracking
6. Performance monitoring

## Quality Assurance
1. Automated testing pipeline
2. Code coverage requirements
3. Performance benchmarks
4. Security scanning
5. Dependency auditing
6. Documentation review