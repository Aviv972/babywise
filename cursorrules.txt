# Babywise Assistant Project Guidelines

## Project Overview
- Name: Babywise Assistant
- Description: A domain-specific assistant providing personalized baby care guidance and routine tracking for new and future parents
- Version: 1.0.0

## Project Purpose
- Provide personalized advice on baby care topics (sleep, feeding, baby gear, development, health/safety)
- Support multilingual interactions with full Hebrew language support including RTL formatting
- Enable comprehensive routine tracking for monitoring baby's schedule (daily, weekly, monthly)
- Present information in a user-friendly, WhatsApp-like chat interface

## Directory Structure
- backend/: Python backend code using LangChain and LangGraph
  - api/: API endpoints and routing
  - db/: Database models and routine tracking functionality
  - workflow/: LangGraph workflow nodes and processing logic
  - services/: Service layer for business logic
  - data/: Static data and configuration
- frontend/: HTML, CSS, and JavaScript for the WhatsApp-like chat interface
- static/: Static assets including scripts, styles, and images
- tests/: Test files for various components
- docs/: Documentation files

## Coding Standards
### Code Formatting
- Indentation: 4 spaces for Python, 2 spaces for JavaScript/HTML/CSS
- Max Line Length: 100 characters
- Quotes: Single quotes for JavaScript, double quotes for Python
- Semicolons: Required for JavaScript

### Naming Conventions
- Python Functions: snake_case (e.g., extract_context)
- JavaScript Functions: camelCase (e.g., addMessage)
- Classes: PascalCase (e.g., BabywiseState)
- Constants: UPPER_SNAKE_CASE (e.g., API_ENDPOINTS)
- Files:
  - Python: snake_case.py (e.g., command_parser.py)
  - JavaScript: camelCase.js (e.g., script.js)

### Comments
- Required for:
  - Complex logic (especially regex patterns for command detection)
  - Public API functions
  - Domain-specific prompt templates
- Style: 
  - Single line comments for brief explanations
  - Docstrings for Python functions
  - JSDoc for JavaScript functions

### Asynchronous Programming
- All workflow nodes must use async/await pattern
- Redis operations should be non-blocking using aioredis
- Error handling should include proper async try/except blocks
- Async function signatures must be consistent across the workflow
- Testing async code should use asyncio.run() for proper execution

## Technology Stack
### Backend
- Python 3.12+
- LangChain 0.3+
- LangGraph 0.2+
- OpenAI API
- FastAPI
- SQLite (for routine tracking)
- Redis (for cloud deployment persistence)
- aioredis (for asynchronous Redis operations)
- Uvicorn (ASGI server)

### Frontend
- HTML5
- CSS3
- JavaScript (ES6+)
- Font Awesome icons
- LocalStorage for client-side persistence

### Deployment
- Environment variables for API keys (.env file)
- Web server for frontend files
- SQLite database for data persistence

## Key Components
### Backend Components
- State Schema (BabywiseState)
- Workflow Nodes:
  - Extract Context: Analyzes messages for relevant context
  - Select Domain: Determines the appropriate knowledge domain
  - Generate Response: Creates contextually relevant responses
  - Post-Process: Handles command detection and database operations
  - Command Parser: Processes natural language commands for routine tracking
- Database Integration for Routine Tracking
- Redis Service for Cloud Persistence:
  - Conversation state persistence
  - Routine data caching
  - Cross-instance data synchronization
- Multi-language Support (English and Hebrew)

### Frontend Components
- WhatsApp-like Chat UI with responsive design
- RTL Support for Hebrew language
- Command Examples with Visual Formatting
- LocalStorage for Thread ID Persistence
- Typing Indicator for User Feedback
- Summary Formatting for Routine Reports

## Features
### Core Features
- Domain-specific conversational AI (sleep, feeding, baby gear, development, health/safety)
- Context-aware responses with multi-turn conversation support
- Bilingual support (English and Hebrew) with proper RTL formatting
- Baby routine tracking with natural language command processing
- Persistent conversation history with thread management
- Cloud deployment support with Redis-based state persistence
- Offline capability with local storage fallback

### Routine Tracker Features
- Natural language command detection for event logging
- Event types: sleep (start/end), feeding
- Time format flexibility (12/24 hour)
- Summary reports (daily, weekly) with statistics
- Event aggregation with duration calculations
- Intelligent sleep duration calculation for overlapping events
- Single-baby tracking with accurate sleep time reporting

### Sleep Duration Calculation Rules
- When multiple sleep events overlap, calculate duration from earliest start to latest end
- Avoid double-counting sleep time when multiple events share the same end time
- Pair sleep events with sleep_end events using efficient SQL queries
- Handle edge cases like missing end times gracefully
- Provide accurate total sleep duration in summary reports
- Log detailed information about sleep event processing for debugging

## Accessibility Requirements
- Responsive design for all devices (mobile, tablet, desktop)
- Clear visual feedback (typing indicator, message formatting)
- RTL language support with proper text alignment and arrow direction
- High contrast UI elements for readability
- Semantic HTML structure

## Security Practices
- Secure API key management through environment variables
- Data persistence with SQLite database
- Input validation for commands and user inputs
- Error handling with appropriate user feedback 

## Critical Requirement: 
The only priority is to maintain full project functionality as designed.
❌ No simplified versions
❌ No hotfixes or quick patches that compromise intended functionality
Please ensure the solution preserves the app's original behavior while resolving the deployment problem. Let me know if you need any clarification!